# Create a folder to save figures
dir.create("/Figures", recursive = TRUE)
d=3
# Folder for d dimension test scenario
folder <- paste("Example_Data/",d,"D/Kriging",sep="")
dir.create(folder, recursive = TRUE)
# Folder for d dimension test scenario
folder <- paste("/Example_Data/",d,"D/Kriging",sep="")
dir.create(folder, recursive = TRUE)
rm(list = ls())
graphics.off()
# Set a working directory, please set it to your own working folder when testing
dir <- "/storage/work/h/hxy46/Sensitivity"
setwd(dir = dir)
# Folder for d dimension test scenario
folder <- paste("/Example_Data/",d,"D/Kriging",sep="")
d=3
dir.create(folder, recursive = TRUE)
# A while loop includes the stopping criterion
while (1>0){
# Begin with the base sample size (also sampled by LHS)
X_GP <- randomLHS(Kriging_size,d)
# Evaluate the model to get their true outputs
Y_GP <- apply(X_GP,1,Reliability)
# Record the Kriging model evaluation time
start.time <- Sys.time()
GPmodel <- GP_fit(X_GP,Y_GP)
end.time <- Sys.time()
# Emulator convergence check
# First get the standard error of all the training samples
a <- predict(GPmodel,x_test)
std <- sqrt(a$MSE)
# If all the standard errors are less than or equal to 1, then convergence is reached, else add sample size
if (max(std)<=1){
break
} else {
Kriging_size <- Kriging_size + d
}
}
# Folder for d dimension test scenario
folder <- paste("/Example_Data/",d,"D/Kriging",sep="")
dir.create(folder, recursive = TRUE)
# Folder for d dimension test scenario
folder <- paste("Example_Data/",d,"D/Kriging",sep="")
dir.create(folder, recursive = TRUE)
setwd("D:/Penn state/paper2/Sensitivity")
# Load the required package
library(RColorBrewer)
# Sizes used for standard Sobol traceplot
Size_S <- c(seq(40,1000,by=40),seq(1000,100000,by=1000))
# Sizes used for Kriging traceplot
Size_K <- seq(20,80,by=2)
# Sizes used for AKMCS traceplot
Size_A <- seq(13,50,by=1)
# Sizes used for BASS traceplot
Size_B <- seq(20,100,by=5)
# Load the saved sensitivity indices from script 5
load("./Example_Data/5D/Traceplot/T_S")
load("./Example_Data/5D/Traceplot/T_S_high")
load("./Example_Data/5D/Traceplot/T_S_low")
load("./Example_Data/5D/Traceplot/T_K")
load("./Example_Data/5D/Traceplot/T_B")
load("./Example_Data/5D/Traceplot/T_A")
# Load the convergence size of the 5D test model
load("./Data/Sobol_convergencesize")
C_S <- Sobol_convergesize[2]
load("./Data/5D/Kriging/Kriging_size")
C_K <- Kriging_size
load("./Data/5D/AKMCS/x")
C_A <- dim(x)[1]
load("./Data/5D/BASS/BASS_size")
C_B <- sample_size
# Create a folder to save figures
folder <- "./Figures"
if (!dir.exists(folder)){
dir.create(folder, recursive = TRUE)
}
# 4 panels of trace plots + 1 line showing convergence locations
pdf(file = paste("./Figures/Figure_2_new.pdf",sep=""),width = 18,height = 12)
layout(matrix(c(1,2,3,4,5,5), nrow = 3, ncol = 2, byrow = TRUE))
par(mar=c(4,5,6,2.6))
plot(Size_S,T_S,type="l",col="seagreen",xlab="Sample size",ylab="Sensitivity",
cex.axis=1.7,cex.lab=1.7)
lines(Size_S,T_S_high,lty = 2, col = "seagreen")
lines(Size_S,T_S_low,lty = 2, col = "seagreen")
legend("topright",lty = c(1,2), col = c("seagreen","seagreen"),
legend = c("Standard Sobol","95% CI"), bty = "n", cex = 2)
mtext("a",side = 3, line = 1, at = 0, cex = 1.5)
arrows(C_S,1.25,C_S,1.05,length = 0.1, col = "seagreen")
par(mar=c(4,5,6,2.6))
plot(Size_K,T_K[1, ],type="l",col="purple",ylim = c(min(T_K),max(T_K)),
xlab="Sample size",ylab="Sensitivity",cex.axis=1.7,cex.lab=1.7)
for (i in 2:5){
lines(Size_K,T_K[i, ],col="purple")
}
legend("topright",lty = 1, col = "purple", legend = "Kriging", bty = "n", cex = 2)
mtext("b",side = 3, line = 1, at = min(Size_K), cex = 1.5)
arrows(C_K,0.9855,C_K,0.988,length = 0.1,col="purple")
par(mar=c(4,5,2.6,2.6))
plot(Size_B,T_B[1, ],type="l",col="blue",ylim = c(min(T_B)-0.001,max(T_B)+0.001),
xlab="Sample size",ylab="Sensitivity",cex.axis=1.7,cex.lab=1.7)
for (i in 2:5){
lines(Size_B,T_B[i, ],col="blue")
}
legend("topright",lty = 1, col = "blue", legend = "BASS", bty = "n", cex = 2)
mtext("c",side = 3, line = 1, at = min(Size_B), cex = 1.5)
arrows(C_B,0.9905,C_B,0.9899,length = 0.1,col="blue")
par(mar=c(4,5,2.6,2.6))
plot(Size_A,T_A[1, ],type="l",col="red",ylim = c(min(T_A),max(T_A)),
xlab="Sample size",ylab="Sensitivity",cex.axis=1.7,cex.lab=1.7)
for (i in 2:5){
lines(Size_A,T_A[i, ],col="red")
}
legend("topright",lty = 1, col = "red", legend = "AKMCS", bty = "n", cex = 2)
mtext("d",side = 3, line = 1, at = min(Size_A), cex = 1.5)
arrows(C_A,0.983,C_A,0.987,length = 0.1,col="red")
plot(0,0,type = "n", xaxt = "n", yaxt = "n", bty="n", xlab = "", ylab="",
xlim=c(10, 100000), ylim=c(0, 0.7),log="x")
axis(1, at = c(10,100,1000,10000,100000),labels = c(10,100,1000,10000,100000), pos = 0.5,
cex.axis = 2, cex.lab = 2)
points(C_S, 0.5, col = "seagreen", pch = 20, cex = 2)
points(C_K, 0.5, col = "purple", pch = 20, cex = 2)
points(C_B, 0.5, col = "blue", pch = 20, cex = 2)
points(C_A, 0.5, col = "red", pch = 20, cex = 2)
text(C_S, 0.6, labels = "Sobol", col = "seagreen", cex = 2)
text(C_K, 0.6, labels = "Kriging", col = "purple", cex = 2)
text(C_B, 0.4, labels = "BASS", col = "blue", cex = 2)
text(C_A, 0.6, labels = "AKMCS", col = "red", cex = 2)
text(1000, 0.2, labels = "Required sample size for convergence", col = "black", cex = 2)
dev.off()
# Remove all existing environment and plots
rm(list = ls())
# Load the required packages
library(plot.matrix)
library(RColorBrewer)
install.packages("plot.matrix")
# Load the required packages
library(plot.matrix)
# Tested dimension, method names, and evaluation time
tested_D_num <- c(2,5,10,15,20,30)
tested_D <- c("2D","5D","10D","15D","20D","30D")
tested_M <- c("Kriging","AKMCS","BASS")
tested_eval_time <- c(10^(-6),10^(-5),0.0001,0.001,0.01,0.1,1,10,60,3600,3600*6,3600*12,3600*24)
# Total time of each method & each scenario
Time_Sobol <- matrix(NA,nrow = length(tested_D),ncol = length(tested_eval_time))
Time_Kriging <- matrix(NA,nrow = length(tested_D),ncol = length(tested_eval_time))
Time_AKMCS <- matrix(NA,nrow = length(tested_D),ncol = length(tested_eval_time))
Time_BASS <- matrix(NA,nrow = length(tested_D),ncol = length(tested_eval_time))
# Load all related results for each test scenario
for (i in 1:length(tested_D)) {
folder <- paste("./Data/",tested_D[i],sep="")
# General:
load(paste(folder,"/avg_eval_time",sep=""))
# Sobol:
load(paste(folder,"/Sobol/T_Sobol",sep=""))
load(paste(folder,"/Sobol/S_Sobol",sep=""))
Sobol_convergesize <- S$C
# Kriging:
load(paste(folder,"/Kriging/T_Kriging",sep=""))
load(paste(folder,"/Kriging/T_KrigingSobol",sep=""))
load(paste(folder,"/Kriging/Kriging_size",sep=""))
# AKMCS:
load(paste(folder,"/AKMCS/AKMCS_time",sep=""))
load(paste(folder,"/AKMCS/x",sep=""))
AKMCS_size <- dim(x)[1]
load(paste(folder,"/AKMCS/T_AKMCSSobol",sep=""))
# BASS:
load(paste(folder,"/BASS/T_BASS",sep=""))
load(paste(folder,"/BASS/T_BASSSobol",sep=""))
load(paste(folder,"/BASS/BASS_size",sep=""))
BASS_size <- sample_size
# Calculation of the computational time in each scenario
# Sensitivity analysis time + model evaluation adjusted time + emulation time
for (j in 1:length(tested_eval_time)) {
Time_Sobol[i,j] <- T_Sobol + (tested_eval_time[j]-avg_eval_time)*Sobol_convergesize
Time_Kriging[i,j] <- T_Kriging + (tested_eval_time[j]-avg_eval_time)*Kriging_size+ T_KrigingSobol
Time_AKMCS[i,j] <- T_AKMCS + (tested_eval_time[j]-avg_eval_time)*AKMCS_size + T_AKMCSSobol
Time_BASS[i,j] <- T_BASS + (tested_eval_time[j]-avg_eval_time)*BASS_size + T_BASSSobol
}
}
# Label of evaluation time
eval_time_lab <- c("1us","10us","0.1ms","1ms","10ms","0.1s","1s","10s","1min","1h","6h","12h","1d")
Mat = floor(log10(PercentTime_AKMCS))
Cols<-brewer.pal(n = 11, name = "RdYlGn")
rownames(Mat)<-tested_D_num
colnames(Mat)<-eval_time_lab
pdf(file = "./Figures/Figure_S2_new.pdf",width = 14,height = 7)
par(mar=c(5,5,2.6,7))
plot(Mat[nrow(Mat):1, ],breaks = c(-8:4),col=c("orangered4",Cols),xlab="Time of single run",
ylab="Number of input parameters",digits = 1,fmt.cell='%.0f',max.col=100,
cex.lab=1.5,cex.axis=1,main="",fmt.key = "%+.0f")
mtext('Order of magnitude', side=3, line=1, at=15)
mtext('Speed gain of AKMCS',side=3, line=-0.5, at=15)
dev.off()
Time_Sobol[Time_Sobol < 0] <- Time_Sobol[1,1]
PercentTime_Kriging <- Time_Sobol/Time_Kriging
PercentTime_AKMCS <- Time_Sobol/Time_AKMCS
PercentTime_BASS <- Time_Sobol/Time_BASS
#Grid plot of AKMCS gain
Mat = floor(log10(PercentTime_AKMCS))
Cols<-brewer.pal(n = 11, name = "RdYlGn")
rownames(Mat)<-tested_D_num
colnames(Mat)<-eval_time_lab
pdf(file = "./Figures/Figure_S2_new.pdf",width = 14,height = 7)
par(mar=c(5,5,2.6,7))
plot(Mat[nrow(Mat):1, ],breaks = c(-8:4),col=c("orangered4",Cols),xlab="Time of single run",
ylab="Number of input parameters",digits = 1,fmt.cell='%.0f',max.col=100,
cex.lab=1.5,cex.axis=1,main="",fmt.key = "%+.0f")
mtext('Order of magnitude', side=3, line=1, at=15)
mtext('Speed gain of AKMCS',side=3, line=-0.5, at=15)
dev.off()
pdf(file = "./Figures/Figure_S2.pdf",width = 14,height = 7)
par(mar=c(5,5,2.6,7))
plot(Mat[nrow(Mat):1, ],breaks = c(-8:4),col=c("orangered4",Cols),xlab="Time of single run",
ylab="Number of input parameters",digits = 1,fmt.cell='%.0f',max.col=100,
cex.lab=1.5,cex.axis=1,main="",fmt.key = "%+.0f")
mtext('Order of magnitude', side=3, line=1, at=15)
mtext('Speed gain of AKMCS',side=3, line=-0.5, at=15)
dev.off()
